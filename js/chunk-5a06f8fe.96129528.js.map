{"version":3,"sources":["webpack:///./src/assets/curso/temas/30.svg","webpack:///./src/assets/curso/temas/33.png","webpack:///./src/assets/curso/temas/35.svg","webpack:///./src/pages/Tema4.vue","webpack:///src/pages/Tema4.vue","webpack:///./src/pages/Tema4.vue?8a51","webpack:///./src/pages/Tema4.vue?f0cf","webpack:///./src/assets/curso/temas/28.png","webpack:///./src/assets/curso/temas/32.svg","webpack:///./src/assets/curso/temas/29.png","webpack:///./src/assets/curso/temas/31.png","webpack:///./src/assets/curso/temas/34.png"],"names":["module","exports","render","_vm","this","_c","_self","staticClass","_m","_v","staticRenderFns","staticStyle","attrs","require","name","data","mounted","$nextTick","$aosRefresh","updated","component"],"mappings":"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","file":"js/chunk-5a06f8fe.96129528.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/30.9f7a7ef9.svg\";","module.exports = __webpack_public_path__ + \"img/33.f748a85b.png\";","module.exports = __webpack_public_path__ + \"img/35.6fd0fc0b.svg\";","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"curso-main-container pb-3\"},[_c('BannerInterno'),_c('div',{staticClass:\"container tarjeta tarjeta--blanca p-4 p-md-5 mb-5\"},[_vm._m(0),_vm._m(1),_c('Separador'),_vm._m(2),_vm._m(3),_vm._m(4),_c('Separador'),_vm._m(5),_vm._m(6),_c('p',{staticClass:\"mb-4\"},[_vm._v(\"Esta separación de preocupaciones nos permite, por ejemplo, cambiar el sistema de base de datos sin afectar la lógica de negocio, o actualizar la interfaz de usuario sin tocar el núcleo de la aplicación. Es como construir un edificio con sistemas modulares: puedes renovar el interior sin afectar la estructura fundamental.\")]),_c('Separador'),_vm._m(7),_vm._m(8),_vm._m(9),_vm._m(10),_vm._m(11)],1)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"titulo-principal color-acento-contenido\"},[_c('div',{staticClass:\"titulo-principal__numero\"},[_c('span',[_vm._v(\"4\")])]),_c('h1',[_vm._v(\"Patrones y arquitectura orientada a objetos\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row justify-content-center align-items-center mb-5\"},[_c('div',{staticClass:\"col-lg-8 mb-lg-0 mb-3\"},[_c('div',{staticClass:\"p-5\",staticStyle:{\"background-color\":\"#E6F0FC\"}},[_c('p',{staticClass:\"mb-0\"},[_vm._v(\"La culminación de nuestro viaje por la programación orientada a objetos nos lleva a explorar cómo los patrones de diseño y la arquitectura se entrelazan para crear sistemas robustos y mantenibles. Este capítulo aborda la aplicación práctica de todo lo aprendido hasta ahora, centrándonos en soluciones probadas que han resistido la prueba del tiempo.\")])])]),_c('div',{staticClass:\"col-lg-4 col-7\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/28.png\"),\"alt\":\"\"}})])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"titulo-segundo color-acento-contenido\",attrs:{\"id\":\"t_4_1\",\"data-aos\":\"fade-right\"}},[_c('h2',[_vm._v(\"4.1 Patrones de diseño fundamentales\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',{staticClass:\"mb-4\"},[_vm._v(\"Los patrones de diseño son como recetas probadas que resuelven problemas comunes en el desarrollo de \"),_c('em',[_vm._v(\"software\")]),_vm._v(\". Imagina que eres un arquitecto de edificios: así como existen patrones arquitectónicos probados para diseñar escaleras, ventanas o estructuras de soporte, en el \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" tenemos patrones que nos ayudan a resolver desafíos recurrentes.\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row justify-content-center mb-5\"},[_c('div',{staticClass:\"col-lg-5 col-7 mb-lg-0 mb-3\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/29.png\"),\"alt\":\"\"}})]),_c('div',{staticClass:\"col-lg-7\"},[_c('div',{staticClass:\"p-4 mb-4\",staticStyle:{\"background-color\":\"#DED5DB\"}},[_c('div',{staticClass:\"row justify-content-center\"},[_c('div',{staticClass:\"col-lg-2 col-5 mb-lg-0 mb-3\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/30.svg\"),\"alt\":\"\"}})]),_c('div',{staticClass:\"col-lg-10\"},[_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Consideremos un sistema de notificaciones en una red social moderna. Cuando un usuario realiza una acción significativa (publicar una foto, comentar, dar \\\"me gusta\\\"), varios componentes del sistema necesitan reaccionar: las notificaciones push deben enviarse, los contadores deben actualizarse, las cachés deben invalidarse. Este escenario perfecto para el patrón \"),_c('em',[_vm._v(\"Observer\")]),_vm._v(\" permite que múltiples componentes respondan a eventos sin acoplarse entre sí.\")])])])]),_c('p',{staticClass:\"mb-0\"},[_vm._v(\"Los patrones creacionales, como \"),_c('em',[_vm._v(\"Factory Method\")]),_vm._v(\" y \"),_c('em',[_vm._v(\"Builder\")]),_vm._v(\", son particularmente valiosos en sistemas que deben ser flexibles en la creación de objetos. Por ejemplo, en un sistema de procesamiento de documentos, podríamos necesitar crear diferentes tipos de documentos (PDF, Word, HTML) sin que el código cliente necesite conocer los detalles específicos de cómo se construye cada formato.\")])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"titulo-segundo color-acento-contenido\",attrs:{\"id\":\"t_4_2\",\"data-aos\":\"fade-right\"}},[_c('h2',[_vm._v(\"4.2 Arquitectura limpia con POO\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row justify-content-center align-items-center mb-5\"},[_c('div',{staticClass:\"col-lg-4 col-7 mb-lg-0 mb-3\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/31.png\"),\"alt\":\"\"}})]),_c('div',{staticClass:\"col-lg-8\"},[_c('div',{staticClass:\"p-5\",staticStyle:{\"background-color\":\"#E6F0FC\"}},[_c('p',{staticClass:\"mb-0\"},[_vm._v(\"La arquitectura limpia no es solo un concepto teórico, sino una guía práctica para organizar nuestro código de manera que sea fácil de entender, mantener y adaptar a los cambios. Pensemos en una aplicación de comercio electrónico moderna: la lógica de negocio (cómo se calculan los descuentos, cómo se procesan los pedidos) debe ser independiente de cómo se almacenan los datos o cómo se presenta la interfaz al usuario.\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"titulo-segundo color-acento-contenido\",attrs:{\"id\":\"t_4_3\",\"data-aos\":\"fade-right\"}},[_c('h2',[_vm._v(\"4.3 Implementación práctica de modelos\")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row justify-content-center mb-3\"},[_c('div',{staticClass:\"col-lg-8 mb-lg-0 mb-3\"},[_c('p',{staticClass:\"mb-4\"},[_vm._v(\"La transición del diseño a la implementación es donde la teoría se encuentra con la realidad. Aquí es donde los principios SOLID y los patrones de diseño se convierten en código real que resuelve problemas concretos. Por ejemplo, en una aplicación de gestión hospitalaria, podríamos tener una jerarquía clara de personal médico, pero la implementación debe manejar casos especiales como médicos que también son administrativos, o enfermeros que trabajan en múltiples departamentos.\")]),_c('div',{staticClass:\"p-4 mb-4\",staticStyle:{\"background-color\":\"#DED5DB\"}},[_c('div',{staticClass:\"row justify-content-center\"},[_c('div',{staticClass:\"col-lg-2 col-5 mb-lg-0 mb-3\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/32.svg\"),\"alt\":\"\"}})]),_c('div',{staticClass:\"col-lg-10\"},[_c('p',{staticClass:\"mb-0\"},[_vm._v(\"La clave está en mantener la flexibilidad sin sacrificar la claridad. Cada patrón implementado, cada decisión arquitectónica, debe justificarse por su valor práctico, no por su elegancia teórica. Es como cocinar: no usamos ingredientes solo porque están de moda, sino porque contribuyen al sabor final del plato.\")])])])])]),_c('div',{staticClass:\"col-lg-4 col-7\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/33.png\"),\"alt\":\"\"}})])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"row justify-content-center mb-5\"},[_c('div',{staticClass:\"col-lg-4 col-7 mb-lg-0 mb-3\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/34.png\"),\"alt\":\"\"}})]),_c('div',{staticClass:\"col-lg-8\"},[_c('p',{staticClass:\"mb-4\"},[_vm._v(\"A medida que los sistemas crecen, la importancia de una buena arquitectura se hace más evidente. Un sistema bien diseñado es como una ciudad bien planificada: puede crecer y evolucionar sin perder su funcionalidad esencial. Las interfaces claras actúan como contratos entre diferentes partes del sistema, permitiendo que los equipos trabajen de forma independiente sin pisarse los pies.\")]),_c('div',{staticClass:\"p-4\",staticStyle:{\"background-color\":\"#E6FBEE\"}},[_c('p',{staticClass:\"mb-0\"},[_vm._v(\"La arquitectura orientada a objetos moderna reconoce que el cambio es inevitable. Los requisitos evolucionarán, las tecnologías cambiarán, y nuestro código debe estar preparado para adaptarse. Esta adaptabilidad no viene por accidente, sino por un diseño cuidadoso que sigue principios probados y patrones establecidos.\")])])])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('p',{staticClass:\"mb-4\"},[_vm._v(\"El verdadero arte de la arquitectura de \"),_c('em',[_vm._v(\"software\")]),_vm._v(\" está en encontrar el equilibrio correcto: suficiente estructura para mantener el orden, suficiente flexibilidad para permitir el cambio, y suficiente simplicidad para mantener el sistema comprensible. Al final, el mejor diseño es aquel que permite que el sistema crezca y evolucione con el mínimo dolor posible.\")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"p-4 mb-4\",staticStyle:{\"background-color\":\"#DFE9EA\"}},[_c('div',{staticClass:\"row justify-content-center align-items-center\"},[_c('div',{staticClass:\"col-lg-1 col-5 mb-lg-0 mb-3\"},[_c('img',{attrs:{\"src\":require(\"@/assets/curso/temas/35.svg\"),\"alt\":\"\"}})]),_c('div',{staticClass:\"col-lg-10\"},[_c('p',{staticClass:\"mb-0\"},[_vm._v(\"La programación orientada a objetos, cuando se aplica correctamente, nos proporciona las herramientas para crear estos sistemas adaptables y mantenibles. No se trata solo de escribir código que funcione hoy, sino de crear sistemas que puedan evolucionar con gracia a lo largo del tiempo.\")])])])])\n}]\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n    .titulo-principal.color-acento-contenido\n      .titulo-principal__numero\n        span 4\n      h1 Patrones y arquitectura orientada a objetos\n    .row.justify-content-center.align-items-center.mb-5\n      .col-lg-8.mb-lg-0.mb-3\n        .p-5(style=\"background-color: #E6F0FC \")\n          p.mb-0 La culminación de nuestro viaje por la programación orientada a objetos nos lleva a explorar cómo los patrones de diseño y la arquitectura se entrelazan para crear sistemas robustos y mantenibles. Este capítulo aborda la aplicación práctica de todo lo aprendido hasta ahora, centrándonos en soluciones probadas que han resistido la prueba del tiempo.\n      .col-lg-4.col-7: img(src='@/assets/curso/temas/28.png', alt='')\n    Separador\n    #t_4_1.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 4.1 Patrones de diseño fundamentales\n    p.mb-4 Los patrones de diseño son como recetas probadas que resuelven problemas comunes en el desarrollo de #[em software]. Imagina que eres un arquitecto de edificios: así como existen patrones arquitectónicos probados para diseñar escaleras, ventanas o estructuras de soporte, en el #[em software] tenemos patrones que nos ayudan a resolver desafíos recurrentes.\n    .row.justify-content-center.mb-5\n      .col-lg-5.col-7.mb-lg-0.mb-3: img(src='@/assets/curso/temas/29.png', alt='')\n      .col-lg-7\n        .p-4.mb-4(style=\"background-color: #DED5DB\")\n          .row.justify-content-center\n            .col-lg-2.col-5.mb-lg-0.mb-3: img(src='@/assets/curso/temas/30.svg', alt='')\n            .col-lg-10\n              p.mb-0 Consideremos un sistema de notificaciones en una red social moderna. Cuando un usuario realiza una acción significativa (publicar una foto, comentar, dar \"me gusta\"), varios componentes del sistema necesitan reaccionar: las notificaciones push deben enviarse, los contadores deben actualizarse, las cachés deben invalidarse. Este escenario perfecto para el patrón #[em Observer] permite que múltiples componentes respondan a eventos sin acoplarse entre sí.\n        p.mb-0 Los patrones creacionales, como #[em Factory Method] y #[em Builder], son particularmente valiosos en sistemas que deben ser flexibles en la creación de objetos. Por ejemplo, en un sistema de procesamiento de documentos, podríamos necesitar crear diferentes tipos de documentos (PDF, Word, HTML) sin que el código cliente necesite conocer los detalles específicos de cómo se construye cada formato.\n    Separador\n    #t_4_2.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 4.2 Arquitectura limpia con POO\n    .row.justify-content-center.align-items-center.mb-5\n      .col-lg-4.col-7.mb-lg-0.mb-3: img(src='@/assets/curso/temas/31.png', alt='')\n      .col-lg-8\n        .p-5(style=\"background-color: #E6F0FC \")\n          p.mb-0 La arquitectura limpia no es solo un concepto teórico, sino una guía práctica para organizar nuestro código de manera que sea fácil de entender, mantener y adaptar a los cambios. Pensemos en una aplicación de comercio electrónico moderna: la lógica de negocio (cómo se calculan los descuentos, cómo se procesan los pedidos) debe ser independiente de cómo se almacenan los datos o cómo se presenta la interfaz al usuario.\n    p.mb-4 Esta separación de preocupaciones nos permite, por ejemplo, cambiar el sistema de base de datos sin afectar la lógica de negocio, o actualizar la interfaz de usuario sin tocar el núcleo de la aplicación. Es como construir un edificio con sistemas modulares: puedes renovar el interior sin afectar la estructura fundamental.\n    Separador\n    #t_4_3.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 4.3 Implementación práctica de modelos\n    .row.justify-content-center.mb-3\n      .col-lg-8.mb-lg-0.mb-3\n        p.mb-4 La transición del diseño a la implementación es donde la teoría se encuentra con la realidad. Aquí es donde los principios SOLID y los patrones de diseño se convierten en código real que resuelve problemas concretos. Por ejemplo, en una aplicación de gestión hospitalaria, podríamos tener una jerarquía clara de personal médico, pero la implementación debe manejar casos especiales como médicos que también son administrativos, o enfermeros que trabajan en múltiples departamentos.\n        .p-4.mb-4(style=\"background-color: #DED5DB\")\n          .row.justify-content-center\n            .col-lg-2.col-5.mb-lg-0.mb-3: img(src='@/assets/curso/temas/32.svg', alt='')\n            .col-lg-10\n              p.mb-0 La clave está en mantener la flexibilidad sin sacrificar la claridad. Cada patrón implementado, cada decisión arquitectónica, debe justificarse por su valor práctico, no por su elegancia teórica. Es como cocinar: no usamos ingredientes solo porque están de moda, sino porque contribuyen al sabor final del plato.\n      .col-lg-4.col-7: img(src='@/assets/curso/temas/33.png', alt='')\n    .row.justify-content-center.mb-5\n      .col-lg-4.col-7.mb-lg-0.mb-3: img(src='@/assets/curso/temas/34.png', alt='')\n      .col-lg-8\n        p.mb-4 A medida que los sistemas crecen, la importancia de una buena arquitectura se hace más evidente. Un sistema bien diseñado es como una ciudad bien planificada: puede crecer y evolucionar sin perder su funcionalidad esencial. Las interfaces claras actúan como contratos entre diferentes partes del sistema, permitiendo que los equipos trabajen de forma independiente sin pisarse los pies.\n        .p-4(style=\"background-color: #E6FBEE\")\n          p.mb-0 La arquitectura orientada a objetos moderna reconoce que el cambio es inevitable. Los requisitos evolucionarán, las tecnologías cambiarán, y nuestro código debe estar preparado para adaptarse. Esta adaptabilidad no viene por accidente, sino por un diseño cuidadoso que sigue principios probados y patrones establecidos.\n    p.mb-4 El verdadero arte de la arquitectura de #[em software] está en encontrar el equilibrio correcto: suficiente estructura para mantener el orden, suficiente flexibilidad para permitir el cambio, y suficiente simplicidad para mantener el sistema comprensible. Al final, el mejor diseño es aquel que permite que el sistema crezca y evolucione con el mínimo dolor posible.\n    .p-4.mb-4(style=\"background-color: #DFE9EA\")\n      .row.justify-content-center.align-items-center\n        .col-lg-1.col-5.mb-lg-0.mb-3: img(src='@/assets/curso/temas/35.svg', alt='')\n        .col-lg-10\n          p.mb-0 La programación orientada a objetos, cuando se aplica correctamente, nos proporciona las herramientas para crear estos sistemas adaptables y mantenibles. No se trata solo de escribir código que funcione hoy, sino de crear sistemas que puedan evolucionar con gracia a lo largo del tiempo.\n    \n</template>\n\n<script>\nexport default {\n  name: 'Tema4',\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tema4.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Tema4.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./Tema4.vue?vue&type=template&id=dec85998&lang=pug\"\nimport script from \"./Tema4.vue?vue&type=script&lang=js\"\nexport * from \"./Tema4.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/28.32aa6891.png\";","module.exports = __webpack_public_path__ + \"img/32.4c881a15.svg\";","module.exports = __webpack_public_path__ + \"img/29.17f257da.png\";","module.exports = __webpack_public_path__ + \"img/31.51fc0be9.png\";","module.exports = __webpack_public_path__ + \"img/34.a74bb666.png\";"],"sourceRoot":""}