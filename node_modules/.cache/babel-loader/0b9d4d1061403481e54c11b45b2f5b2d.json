{"remainingRequest":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema1.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema1.vue","mtime":1734976763343},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/babel.config.js","mtime":1734976763286},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUZW1hMScsCiAgY29tcG9uZW50czoge30sCiAgZGF0YTogKCkgPT4gKHsKICAgIC8vIHZhcmlhYmxlcyBkZSB2dWUKICB9KSwKICBtb3VudGVkKCkgewogICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgICB9KTsKICB9LAogIHVwZGF0ZWQoKSB7CiAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgfQp9Ow=="},{"version":3,"names":["name","components","data","mounted","$nextTick","$aosRefresh","updated"],"sources":["src/pages/Tema1.vue"],"sourcesContent":["<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n    .titulo-principal.color-acento-contenido\n      .titulo-principal__numero\n        span 1\n      h1 Fundamentos de la Programación Orientada a Objetos\n    .row.justify-content-center.align-items-center.mb-5\n      .col-lg-4.col-7.mb-lg-0.mb-3: img(src='@/assets/curso/temas/4.png', alt='')\n      .col-lg-8\n        .p-5(style=\"background-color: #DED5DB \")\n          p.mb-0 La programación orientada a objetos (POO) representa un cambio paradigmático en la forma de diseñar y desarrollar software, ofreciendo una manera natural de representar y manipular conceptos del mundo real en código. Este capítulo explora los fundamentos esenciales de este paradigma, estableciendo las bases para el desarrollo de software robusto y mantenible.\n    Separador\n    #t_1_1.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 1.1 Introducción al paradigma orientado a objetos\n    p.mb-5 La programación orientada a objetos surge como respuesta a las limitaciones de la programación procedural, especialmente cuando los sistemas se vuelven más complejos. Este paradigma se basa en la idea de organizar el código en unidades cohesivas llamadas objetos, que combinan datos y comportamiento en una sola entidad.\n      br\n      br\n      |#[b El paradigma POO ofrece varios beneficios fundamentales sobre otros enfoques de programación:]\n    .p-5.mb-4(style=\"background-color:#EEF4F4 \").mb-4\n      .row.justify-content-center.mb-5\n        .col-lg-4.col-7.mb-lg-0.mb-3: img(src='@/assets/curso/temas/5.svg', alt='')\n        .col-lg-5\n          ol.lista-ol.lista-ol--separador\n            li.d-flex\n              span.text-bold(style=\"background-color: #13DE61 \").p-1.px-2.text-white 1\n              p.mb-0 Mayor modularidad y reutilización de código.\n            li.d-flex\n              span.text-bold(style=\"background-color: #13DE61 \").p-1.px-2.text-white 2\n              p.mb-0 Mejor mantenibilidad y escalabilidad.\n            li.d-flex\n              span.text-bold(style=\"background-color: #13DE61 \").p-1.px-2.text-white 3\n              p.mb-0 Representación más natural de conceptos del mundo real.\n            li.d-flex\n              span.text-bold(style=\"background-color: #13DE61 \").p-1.px-2.text-white 4\n              p.mb-0 Mayor facilidad para el trabajo en equipo.\n            li.d-flex\n              span.text-bold(style=\"background-color: #13DE61 \").p-1.px-2.text-white 5\n              p.mb-0 Mejor encapsulamiento y protección de datos.\n    Separador  \n    #t_1_2.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 1.2 Clases y objetos: conceptos básicos\n    p.mb-4 Una clase es un plano o plantilla para crear objetos, definiendo sus propiedades y comportamientos. Un objeto, por otro lado, es una instancia específica de una clase. Esta relación entre clases y objetos es fundamental en POO, y se puede visualizar mediante la siguiente tabla comparativa:\n    .row.justify-content-center.mb-5\n      .col-lg-8.mb-lg-0.mb-3\n        .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n          h5 Tabla 1.\n          span Características principales entre clases y objetos en programación orientada a objetos\n        .tabla-a.color-acento-botones.mb-5\n          table\n            caption Fuente: OIT, 2024.\n            thead(style=\"background-color: #13DE61\").border-0\n              tr\n                th Aspecto\n                th Clase\n                th Objeto\n                \n            tbody\n              tr\n                td Definición\n                td Plantilla o plano\n                td Instancia concreta\n              tr\n                td Naturaleza\n                td Abstracta\n                td Concreta\n              tr\n                td Memoria\n                td No ocupa memoria para atributos\n                td Ocupa memoria para sus valores\n              tr\n                td Creación\n                td Se define una vez\n                td Se pueden crear múltiples instancias\n              tr\n                td Ejemplo\n                td Clase Auto (plano)\n                td miAuto (instancia específica)\n              tr\n                td Tiempo de vida\n                td Durante toda la ejecución\n                td Desde su creación hasta su destrucción\n              tr\n                td Características\n                td Define estructura y comportamiento\n                td Contiene valores específicos\n      .col-lg-4.col-6.mb-lg-0.mb-3: img(src='@/assets/curso/temas/6.svg', alt='')         \n    Separador \n    #t_1_3.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 1.3 Atributos, métodos y encapsulamiento\n    p.mb-4 Los atributos son las características o propiedades que definen un objeto, mientras que los métodos son las acciones que puede realizar. El encapsulamiento es el principio que permite ocultar los detalles internos de implementación y exponer solo lo necesario al mundo exterior.Los atributos en POO pueden tener diferentes niveles de visibilidad:\n    .row.justify-content-center.mb-5\n      .col-lg-4.col-3.mb-lg-0.mb-3\n        .tarjeta.hover.p-4.h-100.shadow\n          .row.justify-content-center.align-items-center\n            .col-lg-3.col-5.mb-lg-0.mb-3: img(src='@/assets/curso/temas/7.svg', alt='')\n            .col-lg-9\n              h4.fst-italic Private.\n              p.mb-0 Solo accesible dentro de la clase.\n      .col-lg-4.col-3.mb-lg-0.mb-3\n        .tarjeta.hover.p-4.h-100.shadow\n          .row.justify-content-center.align-items-center\n            .col-lg-3.col-5.mb-lg-0.mb-3: img(src='@/assets/curso/temas/12.svg', alt='')\n            .col-lg-9\n              h4.fst-italic Protected.\n              p.mb-0 Accesible en la clase y sus descendientes.\n      .col-lg-4.col-3.mb-lg-0.mb-3\n        .tarjeta.hover.p-4.h-100.shadow\n          .row.justify-content-center.align-items-center\n            .col-lg-3.col-5.mb-lg-0.mb-3: img(src='@/assets/curso/temas/13.svg', alt='')\n            .col-lg-9\n              h4.fst-italic Public. \n              p.mb-0 Accesible desde cualquier parte del programa.\n    p.bm-3 Un ejemplo práctico de estos conceptos sería:\n    .row.justify-content-center.mb-5\n      .col-lg-6.mb-lg-0.mb-3\n        .tarjeta-codigo.overflow-hidden(style=\"background-color: #110628 ;border-radius: 10px\")\n          .tarjeta-codigo.p-3.mb-3(style=\"background-color: #3A1D71\"): img.ms-4(src='@/assets/curso/temas/botones.svg', alt='' style=\"width: 94px \")\n          .p-4\n            code(style=\"color: white \").fst-italic class CuentaBancaria:\n              br\n              |def __init__(self, titular, saldo_inicial):\n              br\n              |self.__titular = titular          # Atributo privado\n              br\n              |self.__saldo = saldo_inicial      # Atributo privado\n              br\n              br\n              |def depositar(self, monto):           # Método público\n              br\n              |if monto > 0:\n              br\n              |self.__saldo += monto\n              br\n              |return True\n              br\n              |return False\n              br\n              br\n              |def obtener_saldo(self):              # Método público (getter)\n              br\n              |return self.__saldo\n      .col-lg-6\n        p.mb-4 El encapsulamiento protege la integridad de los datos al:\n        .p-5(style=\"background-color: #E6F0FC\")\n          .row.justify-content-center.align-items-center\n            .col-lg-6.mb-lg-0.mb-3\n              ul.lista-ul--color\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 Prevenir acceso directo a los atributos.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 Permitir validaciones en las modificaciones.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 Ocultar la implementación interna.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 Facilitar cambios futuros sin afectar el código cliente.\n            .col-lg-6: img(src='@/assets/curso/temas/8.svg', alt='')\n    p.mb-4 La combinación adecuada de atributos, métodos y encapsulamiento permite crear objetos que son:\n    .row.justify-content-center.mb-5\n      .col-lg-8\n        .p-5(style=\"background-color: #E6FBEE\").mb-4\n          .row.justify-content-center.align-items-center\n            .col-lg-6.mb-lg-0.mb-3\n              ul.lista-ul--color\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Cohesivos:] todas sus partes trabajan juntas para un propósito común.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Seguros:] los datos están protegidos de modificaciones no autorizadas.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Mantenibles:] los cambios internos no afectan al código que usa la clase.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Reutilizables:] pueden ser utilizados en diferentes contextos.\n            .col-lg-4: img(src='@/assets/curso/temas/9.svg', alt='')\n        .row.justify-content-center.mb-5\n          .col-lg-6.mb-lg-0.mb-3\n            .p-4(style=\"background-color: #E6F0FC \").h-100\n              p.mb-0 La programación orientada a objetos establece una base sólida para el desarrollo de software moderno, permitiendo crear sistemas más organizados, mantenibles y escalables. En los siguientes capítulos, exploraremos principios más avanzados y técnicas de diseño que nos permitirán aprovechar todo el potencial de este paradigma.\n          .col-lg-6.mb-lg-0.mb-3\n            .p-4(style=\"background-color: #E6F0FC \").h-100\n              p.mb-0 La comprensión profunda de estos conceptos fundamentales es esencial para cualquier desarrollador que trabaje con POO, ya que constituyen la base sobre la cual se construyen aplicaciones más complejas y robustas. El dominio de estos conceptos permite tomar mejores decisiones de diseño y crear código más limpio y mantenible.\n      .col-lg-4.d-none.d-lg-block: img(src='@/assets/curso/temas/9.png', alt='')\n\n\n</template>\n\n<script>\nexport default {\n  name: 'Tema1',\n  components: {},\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n"],"mappings":"AAmMA;EACAA,IAAA;EACAC,UAAA;EACAC,IAAA,EAAAA,CAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA,KAAAC,SAAA;MACA,KAAAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAD,WAAA;EACA;AACA","ignoreList":[]}]}