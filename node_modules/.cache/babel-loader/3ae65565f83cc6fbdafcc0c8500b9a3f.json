{"remainingRequest":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/thread-loader/dist/cjs.js!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema2.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema2.vue","mtime":1734976763343},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/babel.config.js","mtime":1734976763286},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUZW1hMicsCiAgZGF0YTogKCkgPT4gKHsKICAgIC8vIHZhcmlhYmxlcyBkZSB2dWUKICB9KSwKICBtb3VudGVkKCkgewogICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgICB9KTsKICB9LAogIHVwZGF0ZWQoKSB7CiAgICB0aGlzLiRhb3NSZWZyZXNoKCk7CiAgfQp9Ow=="},{"version":3,"names":["name","data","mounted","$nextTick","$aosRefresh","updated"],"sources":["src/pages/Tema2.vue"],"sourcesContent":["<template lang=\"pug\">\n.curso-main-container.pb-3\n  BannerInterno\n  .container.tarjeta.tarjeta--blanca.p-4.p-md-5.mb-5\n    .titulo-principal.color-acento-contenido\n      .titulo-principal__numero\n        span 2\n      h1 Principios de diseño orientado a objetos\n    .row.justify-content-center.align-items-center.mb-5\n      .col-lg-4.col-7.mb-lg-0.mb-3: img(src='@/assets/curso/temas/10.png', alt='')\n      .col-lg-8\n        .p-5(style=\"background-color: #E6F0FC \")\n          p.mb-0 El diseño orientado a objetos representa una forma de pensar sobre el software que refleja nuestra comprensión natural del mundo. En este capítulo, exploraremos los principios fundamentales que nos permiten crear sistemas que no solo funcionan, sino que son flexibles, mantenibles y escalables a lo largo del tiempo.\n    Separador \n    #t_2_1.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 2.1 Herencia y polimorfismo\n    div(style=\"background-color: #EDE9EC\")\n      .row.justify-content-center.align-items-center.mb-5\n        .col-lg-8.mb-lg-0.mb-3\n          .p-5 \n            p.mb-0 La herencia es un concepto fundamental que refleja las relaciones naturales entre entidades. Pensemos en una biblioteca moderna: tiene diferentes tipos de recursos como libros, revistas, materiales audiovisuales y recursos digitales. Aunque cada uno es único, todos comparten características comunes: un identificador, un título, un sistema de préstamo y un estado de disponibilidad.\n        .col-lg-4.d-none.d-lg-block: img(src='@/assets/curso/temas/11.png', alt='')\n    p.mb-4 En este contexto, podríamos tener un recurso genérico de biblioteca del cual heredan tipos más específicos. Por ejemplo:\n    .row.justify-content-center.mb-5\n      .col-lg-4.mb-lg-0.mb-3\n        .tarjeta.hover.shadow.p-5.h-100\n          .row.justify-content-center.mb-3\n            .col-5: img(src='@/assets/curso/temas/14.svg', alt='')\n          p.mb-0.text-center Un libro hereda todas las características básicas de un recurso, pero añade propiedades como ISBN, número de páginas y ubicación física.\n      .col-lg-4.mb-lg-0.mb-3\n        .tarjeta.hover.shadow.p-5.h-100\n          .row.justify-content-center.mb-3\n            .col-5: img(src='@/assets/curso/temas/15.svg', alt='')\n          p.mb-0.text-center Un recurso digital hereda las características básicas, pero incluye URL, formato de archivo y requisitos de #[em software].\n      .col-lg-4.mb-lg-0.mb-3\n        .tarjeta.hover.shadow.p-5.h-100\n          .row.justify-content-center.mb-3\n            .col-5: img(src='@/assets/curso/temas/16.svg', alt='')\n          p.mb-0.text-center Una revista hereda lo básico y agrega volumen, número y periodicidad.\n    p.mb-5(data-aos='fade-right') El polimorfismo nos permite tratar todos estos recursos de manera uniforme cuando es necesario (por ejemplo, para prestarlos o devolverlos), pero también de forma específica cuando requerimos funcionalidades particulares. Un ejemplo práctico sería el sistema de notificaciones de vencimiento:\n    .row.justify-content-center.align-items-center.mb-5\n      .col-lg-6.col-7.mb-lg-0.mb-3: img.p-5(src='@/assets/curso/temas/17.svg', alt='')\n      .col-lg-6\n        .tarjeta-codigo.overflow-hidden(style=\"background-color: #110628 ;border-radius: 10px\")\n          .tarjeta-codigo.p-3.mb-3(style=\"background-color: #3A1D71\"): img.ms-4(src='@/assets/curso/temas/botones.svg', alt='' style=\"width: 94px \")\n          .p-4\n            code(style=\"color: white \").fst-italic class RecursoBiblioteca:\n              br\n              |def notificar_vencimiento(self):\n              br\n              |# Comportamiento básico\n              br\n              |pass\n              br\n              br\n              |class LibroFisico(RecursoBiblioteca):\n              br\n              |def notificar_vencimiento(self):\n              br\n              |# Incluye ubicación física para devolución\n              br\n              |pass\n              br\n              br\n              |class RecursoDigital(RecursoBiblioteca):\n              br\n              |def notificar_vencimiento(self):\n              br\n              |# Incluye enlace para renovación en línea\n              br\n              |pass\n    Separador\n    #t_2_2.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 2.2 Composición y agregación\n    p.mb-4 La composición y la agregación representan diferentes tipos de relaciones entre objetos. Para entender mejor estos conceptos, analicemos algunos ejemplos del mundo real:\n    .mn.bg-slyder.p-5.mb-5\n      .tarjeta.p-5.bg-white\n        SlyderA(tipo='b')\n          .row\n            .col-lg-6.mb-4.mb-lg-0\n              h4 Composición (relación fuerte \"es parte de\")\n              ul.lista-ul--color\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Un automóvil y su motor:] el motor es una parte integral del automóvil y no tiene sentido por sí solo.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Una casa y sus habitaciones:] las habitaciones no existen independientemente de la casa.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Un #[em smartphone] y su batería integrada:] la batería es un componente esencial que forma parte del diseño del dispositivo.\n            .col-lg-6.col-7\n              figure\n                img(src='@/assets/curso/temas/18.png', alt='Texto que describa la imagen')\n          .row\n            .col-lg-6.mb-4.mb-lg-0\n              h4 Agregación (relación débil \"tiene un\")\n              ul.lista-ul--color\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Una universidad y sus estudiantes:] Los estudiantes pueden existir independientemente de la universidad.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Una biblioteca y sus libros:] Los libros pueden transferirse a otras bibliotecas sin perder su identidad.\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 #[b Un equipo deportivo y sus jugadores:] Los jugadores pueden cambiar de equipo manteniendo su identidad individual.\n            .col-lg-6.col-7\n              figure\n                img(src='@/assets/curso/temas/18.png', alt='Texto que describa la imagen')\n    .titulo-sexto.color-acento-contenido(data-aos='fade-right')\n      h5 Figura 1.\n      span Relaciones comunes entre clases u objetos en la POO\n    img(src='@/assets/curso/temas/20.png', alt='La Figura 1 se denomina «Relaciones comunes entre clases u objetos en la POO». Ilustra tres tipos principales de relaciones entre objetos o clases en POO: herencia, composición y agregación, cada relación se presenta con un ejemplo y una explicación.').mb-3\n    figcaption Fuente: OIT, 2024.\n    Separador\n    #t_2_3.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 2.3 Principios SOLID en POO\n    p.mb-4 Los principios SOLID son fundamentales para crear sistemas robustos y mantenibles. Veamos cada uno con ejemplos prácticos del mundo real:\n    .row.justify-content-center.mb-5\n      .col-lg-4.d-none.d-lg-block: img(src='@/assets/curso/temas/21.png', alt='')\n      .col-lg-8\n        AcordionA.mb-5(tipo=\"a\" clase-tarjeta=\"tarjeta tarjeta--azul\")\n          div(titulo=\"Principio de Responsabilidad Única (S)\")\n            p.mb-4  Imagine un sistema de gestión de restaurante. En lugar de tener una clase gigante \"Restaurante\" que maneje todo, podríamos tener:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 GestorPedidos: maneja la toma y seguimiento de pedidos.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 GestorInventario: controla el stock de ingredientes.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 GestorPersonal: administra horarios y turnos.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 GestorFacturación: maneja pagos y cuentas.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 GestorMesas: administra reservas y disposición.\n            p.mb-0 Cada clase tiene una única responsabilidad y una sola razón para cambiar. Por ejemplo, si cambia el sistema de reservas, solo necesitamos modificar GestorMesas.\n          div(titulo=\"Principio Abierto/Cerrado (O)\")\n            p.mb-4 Considere un sistema de cálculo de seguros de vehículos. En lugar de modificar el código existente cada vez que se añade un nuevo tipo de vehículo, podemos tener:\n            ul.lista-ul--color\n                li.d-flex\n                  i.fas.fa-check-circle(style=\"color: #1169E3\")\n                  p.mb-0 class CalculadoraSeguro:\n                    br\n                    |def calcular_prima(self, vehiculo):\n                    br\n                    |return vehiculo.calcular_factor_riesgo() * self.prima_base\n            p.mb-0 Así, podemos añadir nuevos tipos de vehículos (motos, camiones, vehículos eléctricos) sin modificar la lógica existente.\n          div(titulo=\"Principio de Sustitución de Liskov (L)\")\n            p.mb-4 En una aplicación de banca en línea, cualquier tipo de cuenta bancaria (ahorro, corriente, plazo fijo) debe poder usarse donde se espera una cuenta genérica. Por ejemplo, todas deben poder:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Mostrar saldo.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Recibir depósitos.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Procesar retiros (con sus reglas específicas).\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Generar estados de cuenta.\n    .row.justify-content-center.mb-5\n      .col-lg-8.mb-lg-0.mb-3\n        AcordionA.mb-5(tipo=\"a\" clase-tarjeta=\"tarjeta tarjeta--azul\")\n          div(titulo=\"Principio de Segregación de Interfaces (I)\")\n            p.mb-4 En un sistema de dispositivos IoT (Internet de las Cosas), diferentes dispositivos tienen diferentes capacidades. En lugar de una interfaz única grande, podríamos tener interfaces específicas:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 DispositivoConectado (conexión básica).\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 DispositivoControlable (puede ser encendido/apagado).\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 DispositivoMonitoreable (envía datos de estado).\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 DispositivoProgramable (puede recibir configuraciones).\n            p.mb-0 Un termostato inteligente podría implementar todas estas interfaces, mientras que un sensor de temperatura simple solo implementaría DispositivoConectado y DispositivoMonitoreable.\n          div(titulo=\"Principio de Inversión de Dependencias (D)\")\n            p.mb-4 En un sistema de comercio electrónico, el procesamiento de pagos debe ser flexible para admitir diferentes proveedores. En lugar de que el sistema dependa directamente de PayPal o Stripe, podría depender de una interfaz de procesamiento de pagos:\n            .tarjeta-codigo.overflow-hidden.mb-4(style=\"background-color: #110628 ;border-radius: 10px\")\n              .tarjeta-codigo.p-3.mb-3(style=\"background-color: #3A1D71\"): img.ms-4(src='@/assets/curso/temas/botones.svg', alt='' style=\"width: 94px \")\n              .p-4\n                code(style=\"color: white \").fst-italic class ProcesadorPagos:\n                  br\n                  |def __init__(self, proveedor_pago):\n                  br\n                  |self.proveedor = proveedor_pago\n                  br\n                  br\n                  |def procesar(self, monto, datos):\n                  br\n                  |return self.proveedor.realizar_pago(monto, datos)\n            p.mb-4 La aplicación práctica de estos principios lleva a sistemas que son:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Más fáciles de entender y mantener.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Más adaptables a cambios en los requisitos.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Más fáciles de probar y depurar.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Más reutilizables y modulares.\n            p.mb-4 Por ejemplo, una aplicación de #[em delivery] de comida que sigue estos principios podría fácilmente:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Añadir nuevos métodos de pago sin afectar el sistema existente.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Incorporar nuevos tipos de entregas (#[em drone], bicicleta, moto).\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Modificar el sistema de calificaciones sin afectar otras funcionalidades.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Agregar nuevos proveedores de mapas y rutas\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Implementar diferentes estrategias de precios y promociones\n      .col-lg-4.col-7: img(src='@/assets/curso/temas/23.png', alt='')\n    p.mb-4 La clave está en identificar las abstracciones correctas y las relaciones naturales entre los objetos del sistema. En el próximo capítulo, veremos cómo estos conceptos se traducen en diagramas UML y cómo podemos utilizar herramientas CASE para diseñar sistemas orientados a objetos efectivos.\n    Separador\n    #t_2_4.titulo-segundo.color-acento-contenido(data-aos='fade-right')\n      h2 2.4 Del diseño a la implementación: consideraciones prácticas\n    p.mb-4 La aplicación de estos principios en el mundo real requiere un balance entre la teoría y la practicidad. Veamos algunos escenarios comunes y cómo abordarlos:\n    .row.justify-content-center.mb-5\n      .col-lg-4.d-none.d-lg-block: img(src='@/assets/curso/temas/22.png', alt='')\n      .col-lg-8\n        AcordionA.mb-5(tipo=\"a\" clase-tarjeta=\"tarjeta tarjeta--azul\")\n          div(titulo=\"Escenario 1: Sistema de gestión hospitalaria\")\n            p.mb-4 Imagine un sistema de gestión de restaurante. En lugar de tener una clase gigante \"Restaurante\" que maneje todo, podríamos tener:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Personal Médico (clase base)\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Médicos especialistas\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Enfermeros\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Técnicos de laboratorio\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Farmacéuticos\n            p.mb-4 Cada tipo de personal comparte características básicas (nombre, ID, horarios) pero tiene responsabilidades específicas. Por ejemplo, todos pueden \"atender pacientes\", pero la implementación específica varía según el rol:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un médico realiza diagnósticos y prescribe tratamientos\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un enfermero administra medicamentos y monitorea signos vitales\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un técnico de laboratorio realiza pruebas y análisis\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un farmacéutico dispensa medicamentos y verifica interacciones\n          div(titulo=\"Escenario 2: plataforma de <em>Streaming</em>\")\n            p.mb-4 Una plataforma de streaming multimedia demuestra perfectamente la composición y agregación:\n            .ms-4: p.fw-bold.mb-3 Composición:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un perfil de usuario y sus preferencias\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Una lista de reproducción y sus elementos\n              li.d-flex \n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un sistema de recomendaciones y sus algoritmos\n            .ms-4: p.fw-bold.mb-3 Agregación:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Una biblioteca y su contenido multimedia\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un usuario y sus dispositivos registrados\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Un grupo familiar y sus miembros\n\n\n          div(titulo=\"Aplicando SOLID en situaciones reales\")\n            p.mb-4 Ejemplo: Sistema de Notificaciones\n              br\n              br\n              | Un sistema de notificaciones bien diseñado podría manejar múltiples canales de comunicación:\n              br\n              br\n              | Situación inicial:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Los usuarios reciben notificaciones solo por email\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Evolución del sistema:\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Se añade notificación por SMS.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Se integra notificación #[em push] para móviles.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Se incorpora mensajería instantánea.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0  Se añade soporte para notificaciones en redes sociales.\n            p.mb-0 Un diseño que sigue los principios SOLID permite esta evolución sin modificar el código existente, simplemente añadiendo nuevas implementaciones de la interfaz de notificación.\n          div(titulo=\"Desafíos comunes y soluciones\")\n            h5 Herencia profunda:\n            p.mb-4 Un sistema de notificaciones bien diseñado podría manejar múltiples canales de comunicación:\n\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Problema: Jerarquías de clases demasiado profundas que son difíciles de mantener.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Solución: Favorecer la composición sobre la herencia cuando sea posible.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Ejemplo: En lugar de crear una jerarquía profunda de tipos de vehículos, usar composición con características como tipo de motor, sistema de transmisión, etc.\n            h5 Acoplamiento excesivo:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Problema: clases que dependen demasiado de los detalles de implementación de otras.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Solución: usar interfaces y abstracciones.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Ejemplo: un sistema de pagos que puede cambiar fácilmente entre diferentes proveedores de servicios.\n            h5 Clases God:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Problema: Clases que intentan hacer demasiado. \n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Solución: Aplicar el principio de responsabilidad única. \n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Ejemplo: Separar una clase \"Pedido\" monolítica en componentes más específicos como \"GestorPedido\", \"CalculadorPrecio\", \"ValidadorInventario\".\n            h5 Patrones de implementación efectivos\n            p.mb-3 Patrón #[em Observer] para notificaciones:\n              br\n              |Sistema de Biblioteca:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Cuando un libro se devuelve:\n                  br\n                  |- Notifica a usuarios en lista de espera.\n                  br\n                  |- Actualiza el inventario.\n                  br\n                  |- Registra la transacción.\n            p.mb-3 Patrón #[em Strategy] para reglas de negocio variables:\n            p.mb-0 Sistema de Descuentos:\n              br\n              | - Descuentos por temporada.\n              br\n              |- Descuentos por volumen.\n              br\n              |- Descuentos por fidelidad.\n              br\n              |- Promociones especiales.\n          div(titulo=\"Mejores prácticas en el diseño orientado a objetos\")\n            h5 Mantener la cohesión alta:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Cada clase debe tener un propósito claro y bien definido.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Los métodos dentro de una clase deben estar relacionados.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Ejemplo: Una clase \"Factura\" que maneja solo aspectos relacionados con la facturación.\n            h5 Mantener el acoplamiento bajo:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Minimizar las dependencias entre clases.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Usar interfaces para comunicación entre componentes.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Ejemplo: Un sistema de reportes que puede funcionar con diferentes fuentes de datos.\n            h5 Diseñar para el cambio:\n            ul.lista-ul--color\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Identificar las partes del sistema que son más propensas a cambiar.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Encapsular esas partes detrás de interfaces estables.\n              li.d-flex\n                i.fas.fa-check-circle(style=\"color: #1169E3\")\n                p.mb-0 Ejemplo: Un sistema de autenticación que puede adaptarse a diferentes proveedores de identidad.\n            p.mb-0 La aplicación efectiva de estos principios y patrones requiere práctica y experiencia. Es importante recordar que el objetivo final es crear software que no solo funcione correctamente, sino que también sea fácil de mantener, modificar y extender a lo largo del tiempo. En el próximo capítulo, exploraremos cómo estos conceptos se traducen en diagramas UML y cómo podemos utilizar herramientas CASE para visualizar y documentar nuestros diseños orientados a objetos.\n</template>\n\n<script>\nexport default {\n  name: 'Tema2',\n  data: () => ({\n    // variables de vue\n  }),\n  mounted() {\n    this.$nextTick(() => {\n      this.$aosRefresh()\n    })\n  },\n  updated() {\n    this.$aosRefresh()\n  },\n}\n</script>\n\n<style lang=\"sass\"></style>\n"],"mappings":"AA2aA;EACAA,IAAA;EACAC,IAAA,EAAAA,CAAA;IACA;EAAA,CACA;EACAC,QAAA;IACA,KAAAC,SAAA;MACA,KAAAC,WAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAD,WAAA;EACA;AACA","ignoreList":[]}]}