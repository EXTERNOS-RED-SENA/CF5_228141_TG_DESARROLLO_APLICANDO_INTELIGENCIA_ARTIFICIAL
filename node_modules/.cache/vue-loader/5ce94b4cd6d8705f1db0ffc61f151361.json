{"remainingRequest":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema2.vue?vue&type=template&id=aa90baf8&lang=pug","dependencies":[{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema2.vue","mtime":1734976763343},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF5_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDIKICAgICAgaDEgUHJpbmNpcGlvcyBkZSBkaXNlw7FvIG9yaWVudGFkbyBhIG9iamV0b3MKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMC5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5wLTUoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFNkYwRkMgIikKICAgICAgICAgIHAubWItMCBFbCBkaXNlw7FvIG9yaWVudGFkbyBhIG9iamV0b3MgcmVwcmVzZW50YSB1bmEgZm9ybWEgZGUgcGVuc2FyIHNvYnJlIGVsIHNvZnR3YXJlIHF1ZSByZWZsZWphIG51ZXN0cmEgY29tcHJlbnNpw7NuIG5hdHVyYWwgZGVsIG11bmRvLiBFbiBlc3RlIGNhcMOtdHVsbywgZXhwbG9yYXJlbW9zIGxvcyBwcmluY2lwaW9zIGZ1bmRhbWVudGFsZXMgcXVlIG5vcyBwZXJtaXRlbiBjcmVhciBzaXN0ZW1hcyBxdWUgbm8gc29sbyBmdW5jaW9uYW4sIHNpbm8gcXVlIHNvbiBmbGV4aWJsZXMsIG1hbnRlbmlibGVzIHkgZXNjYWxhYmxlcyBhIGxvIGxhcmdvIGRlbCB0aWVtcG8uCiAgICBTZXBhcmFkb3IgCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0nZmFkZS1yaWdodCcpCiAgICAgIGgyIDIuMSBIZXJlbmNpYSB5IHBvbGltb3JmaXNtbwogICAgZGl2KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRURFOUVDIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgICAgLmNvbC1sZy04Lm1iLWxnLTAubWItMwogICAgICAgICAgLnAtNSAKICAgICAgICAgICAgcC5tYi0wIExhIGhlcmVuY2lhIGVzIHVuIGNvbmNlcHRvIGZ1bmRhbWVudGFsIHF1ZSByZWZsZWphIGxhcyByZWxhY2lvbmVzIG5hdHVyYWxlcyBlbnRyZSBlbnRpZGFkZXMuIFBlbnNlbW9zIGVuIHVuYSBiaWJsaW90ZWNhIG1vZGVybmE6IHRpZW5lIGRpZmVyZW50ZXMgdGlwb3MgZGUgcmVjdXJzb3MgY29tbyBsaWJyb3MsIHJldmlzdGFzLCBtYXRlcmlhbGVzIGF1ZGlvdmlzdWFsZXMgeSByZWN1cnNvcyBkaWdpdGFsZXMuIEF1bnF1ZSBjYWRhIHVubyBlcyDDum5pY28sIHRvZG9zIGNvbXBhcnRlbiBjYXJhY3RlcsOtc3RpY2FzIGNvbXVuZXM6IHVuIGlkZW50aWZpY2Fkb3IsIHVuIHTDrXR1bG8sIHVuIHNpc3RlbWEgZGUgcHLDqXN0YW1vIHkgdW4gZXN0YWRvIGRlIGRpc3BvbmliaWxpZGFkLgogICAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTEucG5nJywgYWx0PScnKQogICAgcC5tYi00IEVuIGVzdGUgY29udGV4dG8sIHBvZHLDrWFtb3MgdGVuZXIgdW4gcmVjdXJzbyBnZW7DqXJpY28gZGUgYmlibGlvdGVjYSBkZWwgY3VhbCBoZXJlZGFuIHRpcG9zIG3DoXMgZXNwZWPDrWZpY29zLiBQb3IgZWplbXBsbzoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNC5tYi1sZy0wLm1iLTMKICAgICAgICAudGFyamV0YS5ob3Zlci5zaGFkb3cucC01LmgtMTAwCiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItMwogICAgICAgICAgICAuY29sLTU6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE0LnN2ZycsIGFsdD0nJykKICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBVbiBsaWJybyBoZXJlZGEgdG9kYXMgbGFzIGNhcmFjdGVyw61zdGljYXMgYsOhc2ljYXMgZGUgdW4gcmVjdXJzbywgcGVybyBhw7FhZGUgcHJvcGllZGFkZXMgY29tbyBJU0JOLCBuw7ptZXJvIGRlIHDDoWdpbmFzIHkgdWJpY2FjacOzbiBmw61zaWNhLgogICAgICAuY29sLWxnLTQubWItbGctMC5tYi0zCiAgICAgICAgLnRhcmpldGEuaG92ZXIuc2hhZG93LnAtNS5oLTEwMAogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTMKICAgICAgICAgICAgLmNvbC01OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNS5zdmcnLCBhbHQ9JycpCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgVW4gcmVjdXJzbyBkaWdpdGFsIGhlcmVkYSBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBiw6FzaWNhcywgcGVybyBpbmNsdXllIFVSTCwgZm9ybWF0byBkZSBhcmNoaXZvIHkgcmVxdWlzaXRvcyBkZSAjW2VtIHNvZnR3YXJlXS4KICAgICAgLmNvbC1sZy00Lm1iLWxnLTAubWItMwogICAgICAgIC50YXJqZXRhLmhvdmVyLnNoYWRvdy5wLTUuaC0xMDAKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi0zCiAgICAgICAgICAgIC5jb2wtNTogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTYuc3ZnJywgYWx0PScnKQogICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIFVuYSByZXZpc3RhIGhlcmVkYSBsbyBiw6FzaWNvIHkgYWdyZWdhIHZvbHVtZW4sIG7Dum1lcm8geSBwZXJpb2RpY2lkYWQuCiAgICBwLm1iLTUoZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKSBFbCBwb2xpbW9yZmlzbW8gbm9zIHBlcm1pdGUgdHJhdGFyIHRvZG9zIGVzdG9zIHJlY3Vyc29zIGRlIG1hbmVyYSB1bmlmb3JtZSBjdWFuZG8gZXMgbmVjZXNhcmlvIChwb3IgZWplbXBsbywgcGFyYSBwcmVzdGFybG9zIG8gZGV2b2x2ZXJsb3MpLCBwZXJvIHRhbWJpw6luIGRlIGZvcm1hIGVzcGVjw61maWNhIGN1YW5kbyByZXF1ZXJpbW9zIGZ1bmNpb25hbGlkYWRlcyBwYXJ0aWN1bGFyZXMuIFVuIGVqZW1wbG8gcHLDoWN0aWNvIHNlcsOtYSBlbCBzaXN0ZW1hIGRlIG5vdGlmaWNhY2lvbmVzIGRlIHZlbmNpbWllbnRvOgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNi5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZy5wLTUoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNy5zdmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctNgogICAgICAgIC50YXJqZXRhLWNvZGlnby5vdmVyZmxvdy1oaWRkZW4oc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICMxMTA2MjggO2JvcmRlci1yYWRpdXM6IDEwcHgiKQogICAgICAgICAgLnRhcmpldGEtY29kaWdvLnAtMy5tYi0zKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjM0ExRDcxIik6IGltZy5tcy00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvYm90b25lcy5zdmcnLCBhbHQ9Jycgc3R5bGU9IndpZHRoOiA5NHB4ICIpCiAgICAgICAgICAucC00CiAgICAgICAgICAgIGNvZGUoc3R5bGU9ImNvbG9yOiB3aGl0ZSAiKS5mc3QtaXRhbGljIGNsYXNzIFJlY3Vyc29CaWJsaW90ZWNhOgogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfGRlZiBub3RpZmljYXJfdmVuY2ltaWVudG8oc2VsZik6CiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8IyBDb21wb3J0YW1pZW50byBiw6FzaWNvCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8cGFzcwogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8Y2xhc3MgTGlicm9GaXNpY28oUmVjdXJzb0JpYmxpb3RlY2EpOgogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfGRlZiBub3RpZmljYXJfdmVuY2ltaWVudG8oc2VsZik6CiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8IyBJbmNsdXllIHViaWNhY2nDs24gZsOtc2ljYSBwYXJhIGRldm9sdWNpw7NuCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8cGFzcwogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8Y2xhc3MgUmVjdXJzb0RpZ2l0YWwoUmVjdXJzb0JpYmxpb3RlY2EpOgogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfGRlZiBub3RpZmljYXJfdmVuY2ltaWVudG8oc2VsZik6CiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8IyBJbmNsdXllIGVubGFjZSBwYXJhIHJlbm92YWNpw7NuIGVuIGzDrW5lYQogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfHBhc3MKICAgIFNlcGFyYWRvcgogICAgI3RfMl8yLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoMiAyLjIgQ29tcG9zaWNpw7NuIHkgYWdyZWdhY2nDs24KICAgIHAubWItNCBMYSBjb21wb3NpY2nDs24geSBsYSBhZ3JlZ2FjacOzbiByZXByZXNlbnRhbiBkaWZlcmVudGVzIHRpcG9zIGRlIHJlbGFjaW9uZXMgZW50cmUgb2JqZXRvcy4gUGFyYSBlbnRlbmRlciBtZWpvciBlc3RvcyBjb25jZXB0b3MsIGFuYWxpY2Vtb3MgYWxndW5vcyBlamVtcGxvcyBkZWwgbXVuZG8gcmVhbDoKICAgIC5tbi5iZy1zbHlkZXIucC01Lm1iLTUKICAgICAgLnRhcmpldGEucC01LmJnLXdoaXRlCiAgICAgICAgU2x5ZGVyQSh0aXBvPSdiJykKICAgICAgICAgIC5yb3cKICAgICAgICAgICAgLmNvbC1sZy02Lm1iLTQubWItbGctMAogICAgICAgICAgICAgIGg0IENvbXBvc2ljacOzbiAocmVsYWNpw7NuIGZ1ZXJ0ZSAiZXMgcGFydGUgZGUiKQogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIFVuIGF1dG9tw7N2aWwgeSBzdSBtb3RvcjpdIGVsIG1vdG9yIGVzIHVuYSBwYXJ0ZSBpbnRlZ3JhbCBkZWwgYXV0b23Ds3ZpbCB5IG5vIHRpZW5lIHNlbnRpZG8gcG9yIHPDrSBzb2xvLgogICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIFVuYSBjYXNhIHkgc3VzIGhhYml0YWNpb25lczpdIGxhcyBoYWJpdGFjaW9uZXMgbm8gZXhpc3RlbiBpbmRlcGVuZGllbnRlbWVudGUgZGUgbGEgY2FzYS4KICAgICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgICAgcC5tYi0wICNbYiBVbiAjW2VtIHNtYXJ0cGhvbmVdIHkgc3UgYmF0ZXLDrWEgaW50ZWdyYWRhOl0gbGEgYmF0ZXLDrWEgZXMgdW4gY29tcG9uZW50ZSBlc2VuY2lhbCBxdWUgZm9ybWEgcGFydGUgZGVsIGRpc2XDsW8gZGVsIGRpc3Bvc2l0aXZvLgogICAgICAgICAgICAuY29sLWxnLTYuY29sLTcKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE4LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgICAucm93CiAgICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLWxnLTAKICAgICAgICAgICAgICBoNCBBZ3JlZ2FjacOzbiAocmVsYWNpw7NuIGTDqWJpbCAidGllbmUgdW4iKQogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgICBwLm1iLTAgI1tiIFVuYSB1bml2ZXJzaWRhZCB5IHN1cyBlc3R1ZGlhbnRlczpdIExvcyBlc3R1ZGlhbnRlcyBwdWVkZW4gZXhpc3RpciBpbmRlcGVuZGllbnRlbWVudGUgZGUgbGEgdW5pdmVyc2lkYWQuCiAgICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICAgIHAubWItMCAjW2IgVW5hIGJpYmxpb3RlY2EgeSBzdXMgbGlicm9zOl0gTG9zIGxpYnJvcyBwdWVkZW4gdHJhbnNmZXJpcnNlIGEgb3RyYXMgYmlibGlvdGVjYXMgc2luIHBlcmRlciBzdSBpZGVudGlkYWQuCiAgICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICAgIHAubWItMCAjW2IgVW4gZXF1aXBvIGRlcG9ydGl2byB5IHN1cyBqdWdhZG9yZXM6XSBMb3MganVnYWRvcmVzIHB1ZWRlbiBjYW1iaWFyIGRlIGVxdWlwbyBtYW50ZW5pZW5kbyBzdSBpZGVudGlkYWQgaW5kaXZpZHVhbC4KICAgICAgICAgICAgLmNvbC1sZy02LmNvbC03CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xOC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgLnRpdHVsby1zZXh0by5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDUgRmlndXJhIDEuCiAgICAgIHNwYW4gUmVsYWNpb25lcyBjb211bmVzIGVudHJlIGNsYXNlcyB1IG9iamV0b3MgZW4gbGEgUE9PCiAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yMC5wbmcnLCBhbHQ9J0xhIEZpZ3VyYSAxIHNlIGRlbm9taW5hIMKrUmVsYWNpb25lcyBjb211bmVzIGVudHJlIGNsYXNlcyB1IG9iamV0b3MgZW4gbGEgUE9PwrsuIElsdXN0cmEgdHJlcyB0aXBvcyBwcmluY2lwYWxlcyBkZSByZWxhY2lvbmVzIGVudHJlIG9iamV0b3MgbyBjbGFzZXMgZW4gUE9POiBoZXJlbmNpYSwgY29tcG9zaWNpw7NuIHkgYWdyZWdhY2nDs24sIGNhZGEgcmVsYWNpw7NuIHNlIHByZXNlbnRhIGNvbiB1biBlamVtcGxvIHkgdW5hIGV4cGxpY2FjacOzbi4nKS5tYi0zCiAgICBmaWdjYXB0aW9uIEZ1ZW50ZTogT0lULCAyMDI0LgogICAgU2VwYXJhZG9yCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8uY29sb3ItYWNlbnRvLWNvbnRlbmlkbyhkYXRhLWFvcz0nZmFkZS1yaWdodCcpCiAgICAgIGgyIDIuMyBQcmluY2lwaW9zIFNPTElEIGVuIFBPTwogICAgcC5tYi00IExvcyBwcmluY2lwaW9zIFNPTElEIHNvbiBmdW5kYW1lbnRhbGVzIHBhcmEgY3JlYXIgc2lzdGVtYXMgcm9idXN0b3MgeSBtYW50ZW5pYmxlcy4gVmVhbW9zIGNhZGEgdW5vIGNvbiBlamVtcGxvcyBwcsOhY3RpY29zIGRlbCBtdW5kbyByZWFsOgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy00LmQtbm9uZS5kLWxnLWJsb2NrOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yMS5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIEFjb3JkaW9uQS5tYi01KHRpcG89ImEiIGNsYXNlLXRhcmpldGE9InRhcmpldGEgdGFyamV0YS0tYXp1bCIpCiAgICAgICAgICBkaXYodGl0dWxvPSJQcmluY2lwaW8gZGUgUmVzcG9uc2FiaWxpZGFkIMOabmljYSAoUykiKQogICAgICAgICAgICBwLm1iLTQgIEltYWdpbmUgdW4gc2lzdGVtYSBkZSBnZXN0acOzbiBkZSByZXN0YXVyYW50ZS4gRW4gbHVnYXIgZGUgdGVuZXIgdW5hIGNsYXNlIGdpZ2FudGUgIlJlc3RhdXJhbnRlIiBxdWUgbWFuZWplIHRvZG8sIHBvZHLDrWFtb3MgdGVuZXI6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgR2VzdG9yUGVkaWRvczogbWFuZWphIGxhIHRvbWEgeSBzZWd1aW1pZW50byBkZSBwZWRpZG9zLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgR2VzdG9ySW52ZW50YXJpbzogY29udHJvbGEgZWwgc3RvY2sgZGUgaW5ncmVkaWVudGVzLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgR2VzdG9yUGVyc29uYWw6IGFkbWluaXN0cmEgaG9yYXJpb3MgeSB0dXJub3MuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBHZXN0b3JGYWN0dXJhY2nDs246IG1hbmVqYSBwYWdvcyB5IGN1ZW50YXMuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBHZXN0b3JNZXNhczogYWRtaW5pc3RyYSByZXNlcnZhcyB5IGRpc3Bvc2ljacOzbi4KICAgICAgICAgICAgcC5tYi0wIENhZGEgY2xhc2UgdGllbmUgdW5hIMO6bmljYSByZXNwb25zYWJpbGlkYWQgeSB1bmEgc29sYSByYXrDs24gcGFyYSBjYW1iaWFyLiBQb3IgZWplbXBsbywgc2kgY2FtYmlhIGVsIHNpc3RlbWEgZGUgcmVzZXJ2YXMsIHNvbG8gbmVjZXNpdGFtb3MgbW9kaWZpY2FyIEdlc3Rvck1lc2FzLgogICAgICAgICAgZGl2KHRpdHVsbz0iUHJpbmNpcGlvIEFiaWVydG8vQ2VycmFkbyAoTykiKQogICAgICAgICAgICBwLm1iLTQgQ29uc2lkZXJlIHVuIHNpc3RlbWEgZGUgY8OhbGN1bG8gZGUgc2VndXJvcyBkZSB2ZWjDrWN1bG9zLiBFbiBsdWdhciBkZSBtb2RpZmljYXIgZWwgY8OzZGlnbyBleGlzdGVudGUgY2FkYSB2ZXogcXVlIHNlIGHDsWFkZSB1biBudWV2byB0aXBvIGRlIHZlaMOtY3VsbywgcG9kZW1vcyB0ZW5lcjoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICAgIHAubWItMCBjbGFzcyBDYWxjdWxhZG9yYVNlZ3VybzoKICAgICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICAgIHxkZWYgY2FsY3VsYXJfcHJpbWEoc2VsZiwgdmVoaWN1bG8pOgogICAgICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICAgICAgfHJldHVybiB2ZWhpY3Vsby5jYWxjdWxhcl9mYWN0b3Jfcmllc2dvKCkgKiBzZWxmLnByaW1hX2Jhc2UKICAgICAgICAgICAgcC5tYi0wIEFzw60sIHBvZGVtb3MgYcOxYWRpciBudWV2b3MgdGlwb3MgZGUgdmVow61jdWxvcyAobW90b3MsIGNhbWlvbmVzLCB2ZWjDrWN1bG9zIGVsw6ljdHJpY29zKSBzaW4gbW9kaWZpY2FyIGxhIGzDs2dpY2EgZXhpc3RlbnRlLgogICAgICAgICAgZGl2KHRpdHVsbz0iUHJpbmNpcGlvIGRlIFN1c3RpdHVjacOzbiBkZSBMaXNrb3YgKEwpIikKICAgICAgICAgICAgcC5tYi00IEVuIHVuYSBhcGxpY2FjacOzbiBkZSBiYW5jYSBlbiBsw61uZWEsIGN1YWxxdWllciB0aXBvIGRlIGN1ZW50YSBiYW5jYXJpYSAoYWhvcnJvLCBjb3JyaWVudGUsIHBsYXpvIGZpam8pIGRlYmUgcG9kZXIgdXNhcnNlIGRvbmRlIHNlIGVzcGVyYSB1bmEgY3VlbnRhIGdlbsOpcmljYS4gUG9yIGVqZW1wbG8sIHRvZGFzIGRlYmVuIHBvZGVyOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIE1vc3RyYXIgc2FsZG8uCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBSZWNpYmlyIGRlcMOzc2l0b3MuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBQcm9jZXNhciByZXRpcm9zIChjb24gc3VzIHJlZ2xhcyBlc3BlY8OtZmljYXMpLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgR2VuZXJhciBlc3RhZG9zIGRlIGN1ZW50YS4KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5tYi1sZy0wLm1iLTMKICAgICAgICBBY29yZGlvbkEubWItNSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIHRhcmpldGEtLWF6dWwiKQogICAgICAgICAgZGl2KHRpdHVsbz0iUHJpbmNpcGlvIGRlIFNlZ3JlZ2FjacOzbiBkZSBJbnRlcmZhY2VzIChJKSIpCiAgICAgICAgICAgIHAubWItNCBFbiB1biBzaXN0ZW1hIGRlIGRpc3Bvc2l0aXZvcyBJb1QgKEludGVybmV0IGRlIGxhcyBDb3NhcyksIGRpZmVyZW50ZXMgZGlzcG9zaXRpdm9zIHRpZW5lbiBkaWZlcmVudGVzIGNhcGFjaWRhZGVzLiBFbiBsdWdhciBkZSB1bmEgaW50ZXJmYXogw7puaWNhIGdyYW5kZSwgcG9kcsOtYW1vcyB0ZW5lciBpbnRlcmZhY2VzIGVzcGVjw61maWNhczoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBEaXNwb3NpdGl2b0NvbmVjdGFkbyAoY29uZXhpw7NuIGLDoXNpY2EpLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgRGlzcG9zaXRpdm9Db250cm9sYWJsZSAocHVlZGUgc2VyIGVuY2VuZGlkby9hcGFnYWRvKS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIERpc3Bvc2l0aXZvTW9uaXRvcmVhYmxlIChlbnbDrWEgZGF0b3MgZGUgZXN0YWRvKS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIERpc3Bvc2l0aXZvUHJvZ3JhbWFibGUgKHB1ZWRlIHJlY2liaXIgY29uZmlndXJhY2lvbmVzKS4KICAgICAgICAgICAgcC5tYi0wIFVuIHRlcm1vc3RhdG8gaW50ZWxpZ2VudGUgcG9kcsOtYSBpbXBsZW1lbnRhciB0b2RhcyBlc3RhcyBpbnRlcmZhY2VzLCBtaWVudHJhcyBxdWUgdW4gc2Vuc29yIGRlIHRlbXBlcmF0dXJhIHNpbXBsZSBzb2xvIGltcGxlbWVudGFyw61hIERpc3Bvc2l0aXZvQ29uZWN0YWRvIHkgRGlzcG9zaXRpdm9Nb25pdG9yZWFibGUuCiAgICAgICAgICBkaXYodGl0dWxvPSJQcmluY2lwaW8gZGUgSW52ZXJzacOzbiBkZSBEZXBlbmRlbmNpYXMgKEQpIikKICAgICAgICAgICAgcC5tYi00IEVuIHVuIHNpc3RlbWEgZGUgY29tZXJjaW8gZWxlY3Ryw7NuaWNvLCBlbCBwcm9jZXNhbWllbnRvIGRlIHBhZ29zIGRlYmUgc2VyIGZsZXhpYmxlIHBhcmEgYWRtaXRpciBkaWZlcmVudGVzIHByb3ZlZWRvcmVzLiBFbiBsdWdhciBkZSBxdWUgZWwgc2lzdGVtYSBkZXBlbmRhIGRpcmVjdGFtZW50ZSBkZSBQYXlQYWwgbyBTdHJpcGUsIHBvZHLDrWEgZGVwZW5kZXIgZGUgdW5hIGludGVyZmF6IGRlIHByb2Nlc2FtaWVudG8gZGUgcGFnb3M6CiAgICAgICAgICAgIC50YXJqZXRhLWNvZGlnby5vdmVyZmxvdy1oaWRkZW4ubWItNChzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogIzExMDYyOCA7Ym9yZGVyLXJhZGl1czogMTBweCIpCiAgICAgICAgICAgICAgLnRhcmpldGEtY29kaWdvLnAtMy5tYi0zKHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjM0ExRDcxIik6IGltZy5tcy00KHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvYm90b25lcy5zdmcnLCBhbHQ9Jycgc3R5bGU9IndpZHRoOiA5NHB4ICIpCiAgICAgICAgICAgICAgLnAtNAogICAgICAgICAgICAgICAgY29kZShzdHlsZT0iY29sb3I6IHdoaXRlICIpLmZzdC1pdGFsaWMgY2xhc3MgUHJvY2VzYWRvclBhZ29zOgogICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICB8ZGVmIF9faW5pdF9fKHNlbGYsIHByb3ZlZWRvcl9wYWdvKToKICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgfHNlbGYucHJvdmVlZG9yID0gcHJvdmVlZG9yX3BhZ28KICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgfGRlZiBwcm9jZXNhcihzZWxmLCBtb250bywgZGF0b3MpOgogICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICB8cmV0dXJuIHNlbGYucHJvdmVlZG9yLnJlYWxpemFyX3BhZ28obW9udG8sIGRhdG9zKQogICAgICAgICAgICBwLm1iLTQgTGEgYXBsaWNhY2nDs24gcHLDoWN0aWNhIGRlIGVzdG9zIHByaW5jaXBpb3MgbGxldmEgYSBzaXN0ZW1hcyBxdWUgc29uOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIE3DoXMgZsOhY2lsZXMgZGUgZW50ZW5kZXIgeSBtYW50ZW5lci4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIE3DoXMgYWRhcHRhYmxlcyBhIGNhbWJpb3MgZW4gbG9zIHJlcXVpc2l0b3MuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBNw6FzIGbDoWNpbGVzIGRlIHByb2JhciB5IGRlcHVyYXIuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBNw6FzIHJldXRpbGl6YWJsZXMgeSBtb2R1bGFyZXMuCiAgICAgICAgICAgIHAubWItNCBQb3IgZWplbXBsbywgdW5hIGFwbGljYWNpw7NuIGRlICNbZW0gZGVsaXZlcnldIGRlIGNvbWlkYSBxdWUgc2lndWUgZXN0b3MgcHJpbmNpcGlvcyBwb2Ryw61hIGbDoWNpbG1lbnRlOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEHDsWFkaXIgbnVldm9zIG3DqXRvZG9zIGRlIHBhZ28gc2luIGFmZWN0YXIgZWwgc2lzdGVtYSBleGlzdGVudGUuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBJbmNvcnBvcmFyIG51ZXZvcyB0aXBvcyBkZSBlbnRyZWdhcyAoI1tlbSBkcm9uZV0sIGJpY2ljbGV0YSwgbW90bykuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBNb2RpZmljYXIgZWwgc2lzdGVtYSBkZSBjYWxpZmljYWNpb25lcyBzaW4gYWZlY3RhciBvdHJhcyBmdW5jaW9uYWxpZGFkZXMuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBBZ3JlZ2FyIG51ZXZvcyBwcm92ZWVkb3JlcyBkZSBtYXBhcyB5IHJ1dGFzCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBJbXBsZW1lbnRhciBkaWZlcmVudGVzIGVzdHJhdGVnaWFzIGRlIHByZWNpb3MgeSBwcm9tb2Npb25lcwogICAgICAuY29sLWxnLTQuY29sLTc6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzIzLnBuZycsIGFsdD0nJykKICAgIHAubWItNCBMYSBjbGF2ZSBlc3TDoSBlbiBpZGVudGlmaWNhciBsYXMgYWJzdHJhY2Npb25lcyBjb3JyZWN0YXMgeSBsYXMgcmVsYWNpb25lcyBuYXR1cmFsZXMgZW50cmUgbG9zIG9iamV0b3MgZGVsIHNpc3RlbWEuIEVuIGVsIHByw7N4aW1vIGNhcMOtdHVsbywgdmVyZW1vcyBjw7NtbyBlc3RvcyBjb25jZXB0b3Mgc2UgdHJhZHVjZW4gZW4gZGlhZ3JhbWFzIFVNTCB5IGPDs21vIHBvZGVtb3MgdXRpbGl6YXIgaGVycmFtaWVudGFzIENBU0UgcGFyYSBkaXNlw7FhciBzaXN0ZW1hcyBvcmllbnRhZG9zIGEgb2JqZXRvcyBlZmVjdGl2b3MuCiAgICBTZXBhcmFkb3IKICAgICN0XzJfNC50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDIgMi40IERlbCBkaXNlw7FvIGEgbGEgaW1wbGVtZW50YWNpw7NuOiBjb25zaWRlcmFjaW9uZXMgcHLDoWN0aWNhcwogICAgcC5tYi00IExhIGFwbGljYWNpw7NuIGRlIGVzdG9zIHByaW5jaXBpb3MgZW4gZWwgbXVuZG8gcmVhbCByZXF1aWVyZSB1biBiYWxhbmNlIGVudHJlIGxhIHRlb3LDrWEgeSBsYSBwcmFjdGljaWRhZC4gVmVhbW9zIGFsZ3Vub3MgZXNjZW5hcmlvcyBjb211bmVzIHkgY8OzbW8gYWJvcmRhcmxvczoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMjIucG5nJywgYWx0PScnKQogICAgICAuY29sLWxnLTgKICAgICAgICBBY29yZGlvbkEubWItNSh0aXBvPSJhIiBjbGFzZS10YXJqZXRhPSJ0YXJqZXRhIHRhcmpldGEtLWF6dWwiKQogICAgICAgICAgZGl2KHRpdHVsbz0iRXNjZW5hcmlvIDE6IFNpc3RlbWEgZGUgZ2VzdGnDs24gaG9zcGl0YWxhcmlhIikKICAgICAgICAgICAgcC5tYi00IEltYWdpbmUgdW4gc2lzdGVtYSBkZSBnZXN0acOzbiBkZSByZXN0YXVyYW50ZS4gRW4gbHVnYXIgZGUgdGVuZXIgdW5hIGNsYXNlIGdpZ2FudGUgIlJlc3RhdXJhbnRlIiBxdWUgbWFuZWplIHRvZG8sIHBvZHLDrWFtb3MgdGVuZXI6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgUGVyc29uYWwgTcOpZGljbyAoY2xhc2UgYmFzZSkKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIE3DqWRpY29zIGVzcGVjaWFsaXN0YXMKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEVuZmVybWVyb3MKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIFTDqWNuaWNvcyBkZSBsYWJvcmF0b3JpbwogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgRmFybWFjw6l1dGljb3MKICAgICAgICAgICAgcC5tYi00IENhZGEgdGlwbyBkZSBwZXJzb25hbCBjb21wYXJ0ZSBjYXJhY3RlcsOtc3RpY2FzIGLDoXNpY2FzIChub21icmUsIElELCBob3JhcmlvcykgcGVybyB0aWVuZSByZXNwb25zYWJpbGlkYWRlcyBlc3BlY8OtZmljYXMuIFBvciBlamVtcGxvLCB0b2RvcyBwdWVkZW4gImF0ZW5kZXIgcGFjaWVudGVzIiwgcGVybyBsYSBpbXBsZW1lbnRhY2nDs24gZXNwZWPDrWZpY2EgdmFyw61hIHNlZ8O6biBlbCByb2w6CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgVW4gbcOpZGljbyByZWFsaXphIGRpYWduw7NzdGljb3MgeSBwcmVzY3JpYmUgdHJhdGFtaWVudG9zCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBVbiBlbmZlcm1lcm8gYWRtaW5pc3RyYSBtZWRpY2FtZW50b3MgeSBtb25pdG9yZWEgc2lnbm9zIHZpdGFsZXMKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIFVuIHTDqWNuaWNvIGRlIGxhYm9yYXRvcmlvIHJlYWxpemEgcHJ1ZWJhcyB5IGFuw6FsaXNpcwogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgVW4gZmFybWFjw6l1dGljbyBkaXNwZW5zYSBtZWRpY2FtZW50b3MgeSB2ZXJpZmljYSBpbnRlcmFjY2lvbmVzCiAgICAgICAgICBkaXYodGl0dWxvPSJFc2NlbmFyaW8gMjogcGxhdGFmb3JtYSBkZSA8ZW0+U3RyZWFtaW5nPC9lbT4iKQogICAgICAgICAgICBwLm1iLTQgVW5hIHBsYXRhZm9ybWEgZGUgc3RyZWFtaW5nIG11bHRpbWVkaWEgZGVtdWVzdHJhIHBlcmZlY3RhbWVudGUgbGEgY29tcG9zaWNpw7NuIHkgYWdyZWdhY2nDs246CiAgICAgICAgICAgIC5tcy00OiBwLmZ3LWJvbGQubWItMyBDb21wb3NpY2nDs246CiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgVW4gcGVyZmlsIGRlIHVzdWFyaW8geSBzdXMgcHJlZmVyZW5jaWFzCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBVbmEgbGlzdGEgZGUgcmVwcm9kdWNjacOzbiB5IHN1cyBlbGVtZW50b3MKICAgICAgICAgICAgICBsaS5kLWZsZXggCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBVbiBzaXN0ZW1hIGRlIHJlY29tZW5kYWNpb25lcyB5IHN1cyBhbGdvcml0bW9zCiAgICAgICAgICAgIC5tcy00OiBwLmZ3LWJvbGQubWItMyBBZ3JlZ2FjacOzbjoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBVbmEgYmlibGlvdGVjYSB5IHN1IGNvbnRlbmlkbyBtdWx0aW1lZGlhCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBVbiB1c3VhcmlvIHkgc3VzIGRpc3Bvc2l0aXZvcyByZWdpc3RyYWRvcwogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgVW4gZ3J1cG8gZmFtaWxpYXIgeSBzdXMgbWllbWJyb3MKCgogICAgICAgICAgZGl2KHRpdHVsbz0iQXBsaWNhbmRvIFNPTElEIGVuIHNpdHVhY2lvbmVzIHJlYWxlcyIpCiAgICAgICAgICAgIHAubWItNCBFamVtcGxvOiBTaXN0ZW1hIGRlIE5vdGlmaWNhY2lvbmVzCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICBicgogICAgICAgICAgICAgIHwgVW4gc2lzdGVtYSBkZSBub3RpZmljYWNpb25lcyBiaWVuIGRpc2XDsWFkbyBwb2Ryw61hIG1hbmVqYXIgbcO6bHRpcGxlcyBjYW5hbGVzIGRlIGNvbXVuaWNhY2nDs246CiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICBicgogICAgICAgICAgICAgIHwgU2l0dWFjacOzbiBpbmljaWFsOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIExvcyB1c3VhcmlvcyByZWNpYmVuIG5vdGlmaWNhY2lvbmVzIHNvbG8gcG9yIGVtYWlsCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBFdm9sdWNpw7NuIGRlbCBzaXN0ZW1hOgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgU2UgYcOxYWRlIG5vdGlmaWNhY2nDs24gcG9yIFNNUy4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIFNlIGludGVncmEgbm90aWZpY2FjacOzbiAjW2VtIHB1c2hdIHBhcmEgbcOzdmlsZXMuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBTZSBpbmNvcnBvcmEgbWVuc2FqZXLDrWEgaW5zdGFudMOhbmVhLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgIFNlIGHDsWFkZSBzb3BvcnRlIHBhcmEgbm90aWZpY2FjaW9uZXMgZW4gcmVkZXMgc29jaWFsZXMuCiAgICAgICAgICAgIHAubWItMCBVbiBkaXNlw7FvIHF1ZSBzaWd1ZSBsb3MgcHJpbmNpcGlvcyBTT0xJRCBwZXJtaXRlIGVzdGEgZXZvbHVjacOzbiBzaW4gbW9kaWZpY2FyIGVsIGPDs2RpZ28gZXhpc3RlbnRlLCBzaW1wbGVtZW50ZSBhw7FhZGllbmRvIG51ZXZhcyBpbXBsZW1lbnRhY2lvbmVzIGRlIGxhIGludGVyZmF6IGRlIG5vdGlmaWNhY2nDs24uCiAgICAgICAgICBkaXYodGl0dWxvPSJEZXNhZsOtb3MgY29tdW5lcyB5IHNvbHVjaW9uZXMiKQogICAgICAgICAgICBoNSBIZXJlbmNpYSBwcm9mdW5kYToKICAgICAgICAgICAgcC5tYi00IFVuIHNpc3RlbWEgZGUgbm90aWZpY2FjaW9uZXMgYmllbiBkaXNlw7FhZG8gcG9kcsOtYSBtYW5lamFyIG3Dumx0aXBsZXMgY2FuYWxlcyBkZSBjb211bmljYWNpw7NuOgoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBQcm9ibGVtYTogSmVyYXJxdcOtYXMgZGUgY2xhc2VzIGRlbWFzaWFkbyBwcm9mdW5kYXMgcXVlIHNvbiBkaWbDrWNpbGVzIGRlIG1hbnRlbmVyLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgU29sdWNpw7NuOiBGYXZvcmVjZXIgbGEgY29tcG9zaWNpw7NuIHNvYnJlIGxhIGhlcmVuY2lhIGN1YW5kbyBzZWEgcG9zaWJsZS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEVqZW1wbG86IEVuIGx1Z2FyIGRlIGNyZWFyIHVuYSBqZXJhcnF1w61hIHByb2Z1bmRhIGRlIHRpcG9zIGRlIHZlaMOtY3Vsb3MsIHVzYXIgY29tcG9zaWNpw7NuIGNvbiBjYXJhY3RlcsOtc3RpY2FzIGNvbW8gdGlwbyBkZSBtb3Rvciwgc2lzdGVtYSBkZSB0cmFuc21pc2nDs24sIGV0Yy4KICAgICAgICAgICAgaDUgQWNvcGxhbWllbnRvIGV4Y2VzaXZvOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIFByb2JsZW1hOiBjbGFzZXMgcXVlIGRlcGVuZGVuIGRlbWFzaWFkbyBkZSBsb3MgZGV0YWxsZXMgZGUgaW1wbGVtZW50YWNpw7NuIGRlIG90cmFzLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgU29sdWNpw7NuOiB1c2FyIGludGVyZmFjZXMgeSBhYnN0cmFjY2lvbmVzLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgRWplbXBsbzogdW4gc2lzdGVtYSBkZSBwYWdvcyBxdWUgcHVlZGUgY2FtYmlhciBmw6FjaWxtZW50ZSBlbnRyZSBkaWZlcmVudGVzIHByb3ZlZWRvcmVzIGRlIHNlcnZpY2lvcy4KICAgICAgICAgICAgaDUgQ2xhc2VzIEdvZDoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBQcm9ibGVtYTogQ2xhc2VzIHF1ZSBpbnRlbnRhbiBoYWNlciBkZW1hc2lhZG8uIAogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgU29sdWNpw7NuOiBBcGxpY2FyIGVsIHByaW5jaXBpbyBkZSByZXNwb25zYWJpbGlkYWQgw7puaWNhLiAKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEVqZW1wbG86IFNlcGFyYXIgdW5hIGNsYXNlICJQZWRpZG8iIG1vbm9sw610aWNhIGVuIGNvbXBvbmVudGVzIG3DoXMgZXNwZWPDrWZpY29zIGNvbW8gIkdlc3RvclBlZGlkbyIsICJDYWxjdWxhZG9yUHJlY2lvIiwgIlZhbGlkYWRvckludmVudGFyaW8iLgogICAgICAgICAgICBoNSBQYXRyb25lcyBkZSBpbXBsZW1lbnRhY2nDs24gZWZlY3Rpdm9zCiAgICAgICAgICAgIHAubWItMyBQYXRyw7NuICNbZW0gT2JzZXJ2ZXJdIHBhcmEgbm90aWZpY2FjaW9uZXM6CiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8U2lzdGVtYSBkZSBCaWJsaW90ZWNhOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEN1YW5kbyB1biBsaWJybyBzZSBkZXZ1ZWx2ZToKICAgICAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICAgICAgfC0gTm90aWZpY2EgYSB1c3VhcmlvcyBlbiBsaXN0YSBkZSBlc3BlcmEuCiAgICAgICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgICAgIHwtIEFjdHVhbGl6YSBlbCBpbnZlbnRhcmlvLgogICAgICAgICAgICAgICAgICBicgogICAgICAgICAgICAgICAgICB8LSBSZWdpc3RyYSBsYSB0cmFuc2FjY2nDs24uCiAgICAgICAgICAgIHAubWItMyBQYXRyw7NuICNbZW0gU3RyYXRlZ3ldIHBhcmEgcmVnbGFzIGRlIG5lZ29jaW8gdmFyaWFibGVzOgogICAgICAgICAgICBwLm1iLTAgU2lzdGVtYSBkZSBEZXNjdWVudG9zOgogICAgICAgICAgICAgIGJyCiAgICAgICAgICAgICAgfCAtIERlc2N1ZW50b3MgcG9yIHRlbXBvcmFkYS4KICAgICAgICAgICAgICBicgogICAgICAgICAgICAgIHwtIERlc2N1ZW50b3MgcG9yIHZvbHVtZW4uCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8LSBEZXNjdWVudG9zIHBvciBmaWRlbGlkYWQuCiAgICAgICAgICAgICAgYnIKICAgICAgICAgICAgICB8LSBQcm9tb2Npb25lcyBlc3BlY2lhbGVzLgogICAgICAgICAgZGl2KHRpdHVsbz0iTWVqb3JlcyBwcsOhY3RpY2FzIGVuIGVsIGRpc2XDsW8gb3JpZW50YWRvIGEgb2JqZXRvcyIpCiAgICAgICAgICAgIGg1IE1hbnRlbmVyIGxhIGNvaGVzacOzbiBhbHRhOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIENhZGEgY2xhc2UgZGViZSB0ZW5lciB1biBwcm9ww7NzaXRvIGNsYXJvIHkgYmllbiBkZWZpbmlkby4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIExvcyBtw6l0b2RvcyBkZW50cm8gZGUgdW5hIGNsYXNlIGRlYmVuIGVzdGFyIHJlbGFjaW9uYWRvcy4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEVqZW1wbG86IFVuYSBjbGFzZSAiRmFjdHVyYSIgcXVlIG1hbmVqYSBzb2xvIGFzcGVjdG9zIHJlbGFjaW9uYWRvcyBjb24gbGEgZmFjdHVyYWNpw7NuLgogICAgICAgICAgICBoNSBNYW50ZW5lciBlbCBhY29wbGFtaWVudG8gYmFqbzoKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBNaW5pbWl6YXIgbGFzIGRlcGVuZGVuY2lhcyBlbnRyZSBjbGFzZXMuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBVc2FyIGludGVyZmFjZXMgcGFyYSBjb211bmljYWNpw7NuIGVudHJlIGNvbXBvbmVudGVzLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXMuZmEtY2hlY2stY2lyY2xlKHN0eWxlPSJjb2xvcjogIzExNjlFMyIpCiAgICAgICAgICAgICAgICBwLm1iLTAgRWplbXBsbzogVW4gc2lzdGVtYSBkZSByZXBvcnRlcyBxdWUgcHVlZGUgZnVuY2lvbmFyIGNvbiBkaWZlcmVudGVzIGZ1ZW50ZXMgZGUgZGF0b3MuCiAgICAgICAgICAgIGg1IERpc2XDsWFyIHBhcmEgZWwgY2FtYmlvOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIElkZW50aWZpY2FyIGxhcyBwYXJ0ZXMgZGVsIHNpc3RlbWEgcXVlIHNvbiBtw6FzIHByb3BlbnNhcyBhIGNhbWJpYXIuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUoc3R5bGU9ImNvbG9yOiAjMTE2OUUzIikKICAgICAgICAgICAgICAgIHAubWItMCBFbmNhcHN1bGFyIGVzYXMgcGFydGVzIGRldHLDoXMgZGUgaW50ZXJmYWNlcyBlc3RhYmxlcy4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZShzdHlsZT0iY29sb3I6ICMxMTY5RTMiKQogICAgICAgICAgICAgICAgcC5tYi0wIEVqZW1wbG86IFVuIHNpc3RlbWEgZGUgYXV0ZW50aWNhY2nDs24gcXVlIHB1ZWRlIGFkYXB0YXJzZSBhIGRpZmVyZW50ZXMgcHJvdmVlZG9yZXMgZGUgaWRlbnRpZGFkLgogICAgICAgICAgICBwLm1iLTAgTGEgYXBsaWNhY2nDs24gZWZlY3RpdmEgZGUgZXN0b3MgcHJpbmNpcGlvcyB5IHBhdHJvbmVzIHJlcXVpZXJlIHByw6FjdGljYSB5IGV4cGVyaWVuY2lhLiBFcyBpbXBvcnRhbnRlIHJlY29yZGFyIHF1ZSBlbCBvYmpldGl2byBmaW5hbCBlcyBjcmVhciBzb2Z0d2FyZSBxdWUgbm8gc29sbyBmdW5jaW9uZSBjb3JyZWN0YW1lbnRlLCBzaW5vIHF1ZSB0YW1iacOpbiBzZWEgZsOhY2lsIGRlIG1hbnRlbmVyLCBtb2RpZmljYXIgeSBleHRlbmRlciBhIGxvIGxhcmdvIGRlbCB0aWVtcG8uIEVuIGVsIHByw7N4aW1vIGNhcMOtdHVsbywgZXhwbG9yYXJlbW9zIGPDs21vIGVzdG9zIGNvbmNlcHRvcyBzZSB0cmFkdWNlbiBlbiBkaWFncmFtYXMgVU1MIHkgY8OzbW8gcG9kZW1vcyB1dGlsaXphciBoZXJyYW1pZW50YXMgQ0FTRSBwYXJhIHZpc3VhbGl6YXIgeSBkb2N1bWVudGFyIG51ZXN0cm9zIGRpc2XDsW9zIG9yaWVudGFkb3MgYSBvYmpldG9zLgo="},null]}